lipid_names <- lipid_names |>
mutate(id = 1) |>
group_by(Name) |>
summarise(id = cumsum(id)) |>
mutate(new_name = paste(Name, id, sep = "_")
) |>
mutate(new_name = ifelse(id==1, Name, new_name)
)
View(lipid_names)
View(Y)
View(Y1)
View(Y)
View(lipid_names)
lipid_names <- lipid_names |>
mutate(id = 1) |>
group_by(Name) |>
summarise(id = cumsum(id)) |>
mutate(new_name = paste(Name, id, sep = "_")
) |>
mutate(new_name = ifelse(id==1, Name, new_name)
) |> ungroup()
View(lipid_names)
View(lipid_names)
View(Y)
Y <- Y |> group_by(Name)
Y <- Y |> group_by(Name)
lipid_names <- Y |> select(Name)
lipid_names <- lipid_names |>
mutate(id = 1) |>
summarise(id = cumsum(id)) |>
mutate(new_name = paste(Name, id, sep = "_")
) |>
mutate(new
Y <- Y |> group_by(Name)
lipid_names <- Y |> select(Name)
lipid_names <- lipid_names |>
mutate(id = 1) |>
summarise(id = cumsum(id)) |>
mutate(new_name = paste(Name, id, sep = "_")
) |>
mutate(new_name = ifelse(id==1, Name, new_name)
)
View(Y)
View(Y1)
View(Y)
View(lipid_names)
Y <- Y |>
arrange(Name) |>
group_by(Name)
View(Y)
lipid_names <- Y |> select(Name)
lipid_names <- lipid_names |>
mutate(id = 1) |>
summarise(id = cumsum(id)) |>
mutate(new_name = paste(Name, id, sep = "_")
) |>
mutate(new_name = ifelse(id==1, Name, new_name)
)
View(lipid_names)
lipid_names <- Y |> select(Name)
lipid_names <- lipid_names |>
mutate(id = 1) |>
summarise(id = cumsum(id)) |>
mutate(new_name = paste(Name, id, sep = "_")
) |>
mutate(new_name = ifelse(id==1, Name, new_name)
) |>
arrange(Name)
#| echo: false
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(dplyr)){install.packages("dplyr")}
if(!require(Cairo)){install.packages("Cairo")}
mypath <- "raw_data/profinder_data/Batch01"
myfiles <- list.files(mypath)
print(myfiles)                                         # Lists data files within folder
filenumber <- 3
loadme <- paste0(mypath, "/", myfiles[filenumber])
mydata <- read_csv(paste0(loadme))                     # This is the file that will be processed
# Retain columns with lipid name, number of files with detected peak, and raw Peak Height
Y <- mydata |> select(grep("Name", names(mydata)
),
grep("Found", names(mydata)
),
grep("Height", names(mydata)
)
)
# subset out potential duplicates based on name
potential_dups <- Y |>
group_by(Name) |>                           # treats each unique lipid name as a 'group'
filter(n() > 1) |>                          # retains all lipid names with listed more than two times
arrange(Name, -Found)                       # arranges rows so potential duplicates are next to each other
view(potential_dups)                          # opens data frame to allow for scanning
# Note: rows are arranged to show duplicates together with the the duplicate containing more NAs second
rm(potential_dups)
PB <- as.name(names(select(Y, matches("PB")
)
)
)
print(PB)
# Take height values from PB and convert into a vector
PB_sub <- Y |>
select(PB) |>
as_vector()
# Create variable ('sub_height') for difference between average sample and PB height
Y <- Y |>
mutate(sub_height = `Height (avg)` - PB_sub)
# Set NA values to 0 in the sub_height variable
Y$sub_height[is.na(Y$sub_height)] <- 0
# View any rows with a number below zero means background signal is stronger than samples signal
print(Y[Y$sub_height < 0,]$Name)
#| echo: false
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(dplyr)){install.packages("dplyr")}
if(!require(Cairo)){install.packages("Cairo")}
mypath <- "raw_data/profinder_data/Batch01"
myfiles <- list.files(mypath)
print(myfiles)                                         # Lists data files within folder
filenumber <- 3
loadme <- paste0(mypath, "/", myfiles[filenumber])
mydata <- read_csv(paste0(loadme))                     # This is the file that will be processed
# Retain columns with lipid name, number of files with detected peak, and raw Peak Height
Y <- mydata |> select(grep("Name", names(mydata)
),
grep("Found", names(mydata)
),
grep("Height", names(mydata)
)
)
# subset out potential duplicates based on name
potential_dups <- Y |>
group_by(Name) |>                           # treats each unique lipid name as a 'group'
filter(n() > 1) |>                          # retains all lipid names with listed more than two times
arrange(Name, -Found)                       # arranges rows so potential duplicates are next to each other
view(potential_dups)                          # opens data frame to allow for scanning
# Note: rows are arranged to show duplicates together with the the duplicate containing more NAs second
rm(potential_dups)
PB <- as.name(names(select(Y, matches("PB")
)
)
)
print(PB)
# Take height values from PB and convert into a vector
PB_sub <- Y |>
select(PB) |>
as_vector()
# Create variable ('sub_height') for difference between average sample and PB height
Y <- Y |>
mutate(sub_height = `Height (avg)` - PB_sub)
# Set NA values to 0 in the sub_height variable
Y$sub_height[is.na(Y$sub_height)] <- 0
# View any rows with a number below zero means background signal is stronger than samples signal
print(Y[Y$sub_height < 0,]$Name)
Y <- Y |> filter(!sub_height < 0)
rm(PB, PB_sub)
Y['PB_comp'] <- 0                # Creates variable to tabulate instances in which above conditions are met
names(Y)
first_sample <- 4
last_sample <- 15
PB_index <- 16
# going through all rows (variables)
for (j in 1:nrow(Y)){
# going through all sample columns
for (i in first_sample:last_sample) {
# if a variable PB height is greater than lipid height for any sample and nothing is NA
if(is.na(Y[j, PB_index]) == F && is.na(Y[j, i]) == F && Y[j, PB_index] >= Y[j,i]){
# add 1 to 'PB_comp'
Y[j,]$PB_comp = Y[j,]$PB_comp + 1
# or if a variable has PB height but a sample height is NA
}else if(is.na(Y[j, PB_index]) == F && is.na(Y[j, i]) == T){
# add 1 to 'PB comp'
Y[j,]$PB_comp = Y[j,]$PB_comp + 1
# otherwise do not do add anything to PB comp
}else(Y[j,]$PB_comp = Y[j,]$PB_comp)
}
}
cutoff = 6
print(Y[Y$PB_comp >= cutoff,]$Name)     # variables that are removed
Y <- Y |> filter(PB_comp < cutoff)
rm(i, j, last_sample, first_sample, PB_index, cutoff)
Y <- Y |> arrange(Name, `Height (avg)`)
Y <- Y |> select("Name",                      # selects lipid name variable to retain
grep("pos", names(Y)         # retains columns with 'pos' in name (samples only)
),
grep("neg", names(Y)         # retains columns with 'neg' in name (samples only)
)
)
# Removes PB
Y <- Y |> select(-grep("PB", names(Y)         # remove anything related to PB
)
)
View(Y)
Y <- Y |> arrange(Name, -`Height (avg)`)
filenumber <- 3
loadme <- paste0(mypath, "/", myfiles[filenumber])
mydata <- read_csv(paste0(loadme))                     # This is the file that will be processed
# Retain columns with lipid name, number of files with detected peak, and raw Peak Height
Y <- mydata |> select(grep("Name", names(mydata)
),
grep("Found", names(mydata)
),
grep("Height", names(mydata)
)
)
# subset out potential duplicates based on name
potential_dups <- Y |>
group_by(Name) |>                           # treats each unique lipid name as a 'group'
filter(n() > 1) |>                          # retains all lipid names with listed more than two times
arrange(Name, -Found)                       # arranges rows so potential duplicates are next to each other
view(potential_dups)                          # opens data frame to allow for scanning
# Note: rows are arranged to show duplicates together with the the duplicate containing more NAs second
rm(potential_dups)
PB <- as.name(names(select(Y, matches("PB")
)
)
)
print(PB)
# Take height values from PB and convert into a vector
PB_sub <- Y |>
select(PB) |>
as_vector()
# Create variable ('sub_height') for difference between average sample and PB height
Y <- Y |>
mutate(sub_height = `Height (avg)` - PB_sub)
# Set NA values to 0 in the sub_height variable
Y$sub_height[is.na(Y$sub_height)] <- 0
# View any rows with a number below zero means background signal is stronger than samples signal
print(Y[Y$sub_height < 0,]$Name)
Y <- Y |> filter(!sub_height < 0)
rm(PB, PB_sub)
Y['PB_comp'] <- 0                # Creates variable to tabulate instances in which above conditions are met
names(Y)
first_sample <- 4
last_sample <- 15
PB_index <- 16
# going through all rows (variables)
for (j in 1:nrow(Y)){
# going through all sample columns
for (i in first_sample:last_sample) {
# if a variable PB height is greater than lipid height for any sample and nothing is NA
if(is.na(Y[j, PB_index]) == F && is.na(Y[j, i]) == F && Y[j, PB_index] >= Y[j,i]){
# add 1 to 'PB_comp'
Y[j,]$PB_comp = Y[j,]$PB_comp + 1
# or if a variable has PB height but a sample height is NA
}else if(is.na(Y[j, PB_index]) == F && is.na(Y[j, i]) == T){
# add 1 to 'PB comp'
Y[j,]$PB_comp = Y[j,]$PB_comp + 1
# otherwise do not do add anything to PB comp
}else(Y[j,]$PB_comp = Y[j,]$PB_comp)
}
}
cutoff = 6
print(Y[Y$PB_comp >= cutoff,]$Name)     # variables that are removed
Y <- Y |> filter(PB_comp < cutoff)
rm(i, j, last_sample, first_sample, PB_index, cutoff)
Y <- Y |> arrange(Name, -`Height (avg)`)
View(Y)
Y <- Y |> select("Name",                      # selects lipid name variable to retain
grep("pos", names(Y)         # retains columns with 'pos' in name (samples only)
),
grep("neg", names(Y)         # retains columns with 'neg' in name (samples only)
)
)
# Removes PB
Y <- Y |> select(-grep("PB", names(Y)         # remove anything related to PB
)
)
View(Y)
names(Y)
# remove all characters from the beginning of name to the space after 'Height]'
names(Y) <- gsub(".*Height] ", "", names(Y))
# remove the tissue name and underscore but keep the sample number which corresponds to the mouse
names(Y) <- gsub("Plasma_", "", names(Y))
# remove everything after the sample/mouse number. Change dilution specification ('1x') as needed.
names(Y) <- gsub("_1x.*" , "", colnames(Y))
print(names(Y))
lipid_names <- Y |> select(Name)
lipid_names <- lipid_names |>
mutate(id = 1) |>
summarise(id = cumsum(id)) |>
mutate(new_name = paste(Name, id, sep = "_")
) |>
mutate(new_name = ifelse(id==1, Name, new_name)
) |>
arrange(Name)
View(lipid_names)
View(lipid_names)
lipid_names <- Y |> select(Name)
lipid_names |>
mutate(id = 1)
lipid_names |>
mutate(id = 1) |>
summarise(id = cumsum(id))
View(Y)
View(lipid_names)
lipid_names |>
mutate(id = 1) |>
summarise(id = cumsum(id)) |>
mutate(new_name = paste(Name, id, sep = "_")
)
lipidnames$Name
lipid_names$Name
lipid_names <- lipid_names |>
mutate(id = 1) |>
summarise(id = cumsum(id)) |>
mutate(new_name = paste(lipid_names$Name, lipid_names$id, sep = "_")
) |>
mutate(new_name = ifelse(id==1, Name, new_name)
) |>
arrange(Name)
lipid_names <- Y |> select(Name)
lipid_names <- lipid_names |>
mutate(id = 1) |>
summarise(id = cumsum(id)) |>
mutate(new_name = paste(lipid_names$Name, lipid_names$id, sep = "_")
) |>
mutate(new_name = ifelse(id==1, lipid_names$Name, lipid_names$new_name)
) |>
arrange(Name)
lipid_names <- lipid_names |>
mutate(id = 1) |>
summarise(id = cumsum(id)) |>
mutate(new_name = paste(lipid_names$Name, lipid_names$id, sep = "_")
) |>
mutate(new_name = ifelse(id==1, lipid_names$Name, lipid_names$new_name)
)
lipid_names <- lipid_names |>
mutate(id = 1) |>
summarise(id = cumsum(id)) |>
mutate(new_name = paste(lipid_names$Name, lipid_names$id, sep = "_")
) |>
mutate(new_name = ifelse(lipid_names$id==1, lipid_names$Name, lipid_names$new_name)
)
View(lipid_names)
View(Y)
lipid_names <- lipid_names |>
mutate(id = 1)
View(lipid_names)
lipid_names <- lipid_names |>
mutate(id = 1) |>
summarise(id = cumsum(id))
View(lipid_names)
View(lipid_names)
lipid_names <- Y |> select(Name)
lipid_names <- lipid_names |>
mutate(id = 1) |>
group_by(Name) |>
summarise(id = cumsum(id))
View(lipid_names)
lipid_names <- Y |> select(Name)
lipid_names <- lipid_names |>
mutate(id = 1) |>
group_by(Name) |>
summarise(id = cumsum(id)) |>
mutate(new_name = paste(Name, id, sep = "_")
) |>
mutate(new_name = ifelse(id==1, Name, new_name)
)
View(lipid_names)
View(Y)
Y[,1] <- lipid_names$new_name
View(Y)
View(Y)
Y1 <- Y |>
pivot_longer(cols= -1) |>
pivot_wider(names_from = Name)|>
rename(name = Sample)
Y1 <- Y |>
pivot_longer(cols= -1) |>
pivot_wider(names_from = Name)|>
rename(Name = Sample)
View(Y)
Y1 <- Y |>
pivot_longer(cols= -1) |>
pivot_wider(names_from = Name) |>
rename(Name = Sample)
View(Y)
Y <- Y |> mutate(Name = lipid_names$new_name)
View(Y)
lipid_names <- Y |> select(Name)
lipid_names <- lipid_names |>
mutate(id = 1) |>
group_by(Name) |>
summarise(id = cumsum(id)) |>
mutate(new_name = paste(Name, id, sep = "_")
) |>
mutate(new_name = ifelse(id==1, Name, new_name)
) |>
ungroup(Name)
lipid_names <- Y |> select(Name)
lipid_names <- lipid_names |>
mutate(id = 1) |>
group_by(Name) |>
summarise(id = cumsum(id)) |>
mutate(new_name = paste(Name, id, sep = "_")
) |>
mutate(new_name = ifelse(id==1, Name, new_name)
) |>
ungroup()
View(lipid_names)
Y <- Y |> mutate(Name = lipid_names$new_name)
View(Y)
Y1 <- Y |>
pivot_longer(cols= -1) |>
pivot_wider(names_from = Name) |>
rename(Name = Sample)
Y1 <- Y |>
pivot_longer(cols= -1) |>
pivot_wider(names_from = Name)
View(Y1)
Y <- Y |>
pivot_longer(cols= -1) |>
pivot_wider(names_from = Name) |>
rename(name = Sample)
View(Y)
Z <- Y |>
pivot_longer(cols= -1) |>
pivot_wider(names_from = Name) |>
rename(name = Sample)
Y |>
pivot_longer(cols= -1) |>
pivot_wider(names_from = Name) |>
rename(Sample = name)
Y <- Y |>
pivot_longer(cols= -1) |>
pivot_wider(names_from = Name) |>
rename(Sample = name)
View(Y)
# Ensure all but first column of data are numeric vectors
Y[,2:ncol(Y)] <- sapply(Y[,2:ncol(Y)], as.numeric)
rm(lipid_names)
completeness <- 3/4
used_data <- completeness*nrow(Y)
used_data <- completeness*nrow(Y)
missing.value = as.character()
for (i in 1:ncol(Y)){
if(table(is.na(Y[,i]))[1] > used_data)
missing.value[i] = "NO"
else(missing.value[i]="YES")
}
Y_rm = data.frame(cbind(names(Y), missing.value))
View(Y_rm)
completeness <- 3/5
used_data <- completeness*nrow(Y)
Y_rm <- Y_rm[Y_rm$missing.value=="YES", 1]
print(Y_rm)
Z <- Y |> select(!Y_rm)
View(Z)
# Remove lipids not making threshold
Z <- Y |> select(!Y_rm, -Sample)
View(Z)
View(Z)
# Pairwise correlations run to compare height.
z = cor(Z, use = "pairwise.complete.obs")
z[lower.tri(z, diag=TRUE)] = NA
View(z)
z <- z[,2:ncol(z)]
# Pairwise correlations run to compare height.
z = cor(Z[,2:ncol(Z)], use = "pairwise.complete.obs")
z[lower.tri(z, diag=TRUE)] = NA
z <- z[,2:ncol(z)]
View(z)
z = as.data.frame(as.table(z))
View(z)
z = z[order(-abs(z$Freq)),]
y <- z[!is.na(z$Freq)==T,]
View(z)
Z <- Y |>
select(!Y_rm, -Sample)
# Pairwise correlations
Z = cor(Z[,2:ncol(Z)], use = "pairwise.complete.obs")
# Clean up data frame of correlations
Z[lower.tri(Z, diag=TRUE)] = NA
Z <- Z[,2:ncol(Z)]
# Make data tabular
Z = as.data.frame(as.table(Z))
# Order from highest to lowest rho
Z = Z[order(-abs(Z$Freq)),]
# Remove NA values introduced earlier as half the correlation matric is repetitive
Z <- Z[!is.na(Z$Freq)==T,]
view(Z)
rho_cutoff <- 0.9999
Z = Z[Z$Freq > rho_cutoff,]
View(Z)
Z <- Y |>
select(!Y_rm, -Sample)
# Pairwise correlations
Z = cor(Z[,2:ncol(Z)], use = "pairwise.complete.obs")
# Clean up data frame of correlations
Z[lower.tri(Z, diag=TRUE)] = NA
Z <- Z[,2:ncol(Z)]
# Make data tabular
Z = as.data.frame(as.table(Z))
# Order from highest to lowest rho
Z = Z[order(-abs(Z$Freq)),]
# Remove NA values introduced earlier as half the correlation matric is repetitive
Z <- Z[!is.na(Z$Freq)==T,]
# Look at correlation results
view(Z)
rho_cutoff <- 0.99964
View(Z)
Z = Z[Z$Freq > rho_cutoff,]
View(Z)
Z = Z[Z$Freq > rho_cutoff,]     # filters based on rho cutoff
Z_rm = as.vector(Z$Var2)        # list of likely duplicate lipids (may not be all)
print(Z)
print(Z_rm)
Y <- Y |> select(!Z_rm)
View(Y)
rm(Z, rho_cutoff, Z_rm, used_data, completeness)
rm(Z, rho_cutoff, Z_rm, used_data, completeness, Y_rm)
list.files()
list.files("raw_data/")
